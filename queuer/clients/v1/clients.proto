syntax = "proto3";

package queuer.clients.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

import "queuer/entities/v1/client.proto";
import "queuer/entities/v1/queue.proto";
import "queuer/entities/v1/message.proto";
import "queuer/entities/v1/command.proto";
import "queuer/entities/v1/stats.proto";

// Defines the import path that should be used to import the generated package,
// and the package name.
option go_package = "github.com/gsols/goproto/queuer/clients/v1;v1";

service ClientService {
  rpc RegisterClient(RegisterClientRequest) returns (RegisterClientResponse) {
    option (google.api.http) = {
      post: "/v1/clients"
      body: "*"
    };
  }
  rpc PublishClientStats(stream PublishClientStatsRequest) returns (PublishClientStatsResponse) {
    option (google.api.http) = {
      post: "/v1/clients/{client_id}/stats"
      body: "*"
    };
  }

  rpc GetCommands(GetCommandsRequest) returns (stream GetCommandsResponse) {
    option (google.api.http) = {
      get: "/v1/clients/{client_id}/commands"
    };
  }

  rpc AckCommand(AckCommandRequest) returns (AckCommandResponse) {
    option (google.api.http) = {
      post: "/v1/clients/{client_id}/commands/{command_id}:ack"
      body: "*"
    };
  }
}

message RegisterClientRequest {
  entities.v1.Client client = 1;
}

message RegisterClientResponse {
  bool success = 1;
}

message PublishClientStatsRequest {
  string client_id = 1;
  entities.v1.Stats stats = 2;
}

message PublishClientStatsResponse {
  bool success = 1;
}

message GetCommandsRequest {
  string client_id = 1;
}

message GetCommandsResponse {
  repeated entities.v1.Command commands = 1;
}

message AckCommandRequest {
  string client_id = 1;
  string command_id = 2;
  entities.v1.CommandStatus status = 3;
}

message AckCommandResponse {
  bool success = 1;
}


