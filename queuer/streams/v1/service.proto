syntax = "proto3";

package queuer.streams.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

import "queuer/entities/v1/stream.proto";
import "queuer/entities/v1/message.proto";
import "queuer/entities/v1/stats.proto";

import "queuer/streams/v1/messages.proto";

// Defines the import path that should be used to import the generated package,
// and the package name.
option go_package = "github.com/gsols/goproto/queuer/streams/v1;v1";
option php_namespace = "GSols\\PHPProto\\Queuer\\Streams\\v1";
option php_metadata_namespace = "GSols\\PHPProto\\Queuer\\Streams\\v1\\Metadata";

service StreamService {
  rpc Register(RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/v1/streams"
      body: "*"
    };
  }
  rpc GetStream(GetStreamRequest) returns (GetStreamResponse) {
    option (google.api.http) = {
      get: "/v1/streams/{stream_id}"
    };
  }
  rpc DeleteStream(DeleteStreamRequest) returns (DeleteStreamResponse) {
    option (google.api.http) = {
      delete: "/v1/streams/{stream_id}"
    };
  }

  rpc FlushStream(FlushStreamRequest) returns (FlushStreamResponse) {
    option (google.api.http) = {
      post: "/v1/streams/{stream_id}/flush"
    };
  }

  rpc PublishMessage(PublishMessageRequest) returns (PublishMessageResponse) {
    option (google.api.http) = {
      post: "/v1/streams/{stream_id}/publish"
      body: "*"
    };
  }

  rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse) {
    option (google.api.http) = {
      post: "/v1/streams/messages"
      body: "*"
    };
  }

  rpc UpdateState(UpdateStateRequest) returns (UpdateStateResponse) {
    option (google.api.http) = {
      patch: "/v1/streams/{stream_id}/state"
      body: "*"
    };
  }

  rpc GetConsumers(GetConsumersRequest) returns (GetConsumersResponse) {
    option (google.api.http) = {
      get: "/v1/streams/{stream_id}/consumers"
    };
  }

  rpc RegisterConsumer(RegisterConsumerRequest) returns (RegisterConsumerResponse) {
    option (google.api.http) = {
      post: "/v1/streams/{stream_id}/consumers"
      body: "*"
    };
  }

  rpc UnregisterConsumer(UnregisterConsumerRequest) returns (UnregisterConsumerResponse) {
    option (google.api.http) = {
      delete: "/v1/streams/{stream_id}/consumers/{consumer_id}"
    };
  }
}